import unittest
import numpy as np

from populations.Flowsclass_dev import FlowModel
from populations.bbh_models import read_models


class TestFlowModel(unittest.TestCase):
    def test_samples(self):
        pass
    def test_sampling_diving_mapping(self):
        #call map_samples with model samples
        #calculate mappings and find weights for for first few samples?
        #but samples are shuffled in spilt so can;t do this?
        pass
    def test_obs_mapping(self):
        #test map_obs
        samples = [[40.,0.7,-0.5,1.],[0.2,0.1,0.0,1.9]]
        pass
    def test_weights(self):
        #test weights are calculated correctly for detectable and non-detectable cases
        pass

    def test_channel_lable(self):
        #test FlowModel is initiated with correct channel label
        pass


    def test_alphas(self):
        for chnl in ['CE','CHE', 'GC','NSC','SMT']:
            #tests that alpha is calculated correctly
            file_path='/Users/stormcolloms/Documents/PhD/Project_work/OneChannel_Flows/models_reduced.hdf5'
            params = ['mchirp','q', 'chieff', 'z']
            detectable=True
            popsynth_outputs = read_models.read_hdf5(file_path, chnl)
            sensitivity ='midhighlatelow_network'

            if chnl=='CE':
                #CE channel
                alpha = np.zeros((4,5))

                for chib_id in range(4):
                    for alphaCE_id in range(5):
                        samples = popsynth_outputs[(chib_id,alphaCE_id)]
                        mock_samp = samples.sample(int(1e6), weights=(samples['weight']/len(samples)), replace=True)
                        alpha[chib_id,alphaCE_id] = np.sum(mock_samp['pdet_'+sensitivity]) / len(mock_samp)

                FlowPop = FlowModel.from_samples(chnl, popsynth_outputs, params, device='cpu', sensitivity=sensitivity, detectable=detectable)
                alpha_flow =FlowPop.alpha

                #reshape alpha_model into array from dict
                alpha_flow = np.reshape(list(alpha_flow.values()),(4,5))

            else:
                #non-CE channel
                alpha = np.zeros((4))

                for chib_id in range(4):
                        samples = popsynth_outputs[(chib_id)]
                        mock_samp = samples.sample(int(1e6), weights=(samples['weight']/len(samples)), replace=True)
                        alpha[chib_id] = np.sum(mock_samp['pdet_'+sensitivity]) / len(mock_samp)

                FlowPop = FlowModel.from_samples(chnl, popsynth_outputs, params, device='cpu', sensitivity=sensitivity, detectable=detectable)
                alpha_flow =FlowPop.alpha

                #reshape alpha_model into array from dict
                alpha_flow = np.reshape(list(alpha_flow.values()),(4))

            #calculate difference
            alpha_difference=alpha-alpha_flow
            percent_difference=(alpha-alpha_flow)/alpha
            print(alpha_difference)
            print(percent_difference)

            assert (percent_difference <= 0.001).all()

class TestNFlow(unittest.TestCase):
    def test_jacobian(self):
        #test that samples match samples fed in
        #test that jacobian is right datatype
        #test that the jacobian is calculated correctly for 1 test sample
        pass